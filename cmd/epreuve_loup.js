const { ovlcmd } = require('../lib/ovlcmd');
const fs = require('fs');

// √âtat global pour suivre les √©preuves en cours
const epreuveState = new Map();

ovlcmd({
  nom_cmd: 'exercice4',
  classe: 'BLUE_LOCK‚öΩ',
  react: '‚öΩ',
  desc: 'Lance l\'√©preuve du loup - Jeu de tir au but avec transfert de r√¥le'
}, async (ms_org, ovl, { repondre, auteur_Message, ms }) => {
  try {
    // V√©rification des salons autoris√©s
    const authorizedChats = [
      '120363024647909493@g.us',
      '120363307444088356@g.us',
      '22651463203@s.whatsapp.net',
      '22605463559@s.whatsapp.net'
    ];
    if (!authorizedChats.includes(ms_org)) return repondre("Commande non autoris√©e pour ce chat.");

    // Envoi du GIF initial
    await ovl.sendMessage(ms_org, {
      video: { url: 'https://files.catbox.moe/xyzu123.gif' }, // Remplacez par votre URL
      gifPlayback: true
    }, { quoted: ms });

    // Envoi du message avec image
    const initialMessage = `üî∑‚öΩ√âPREUVE DU LOUPü•Ö
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë
Dans cette √©preuve l'objectif est de toucher un autre joueur avec le ballon‚öΩ en lui tirant dessus ! Apr√®s 20 mins le joueur qui sera le loup est √©limin√©‚ùå.
‚ö†Au d√©part le loup est au milieu et les joueurs sont √† 3m, le loup doit juste taguer le joueur qu'il vise ! le joueur le plus faible dans la pi√®ce commence comme √©tant le loup, les joueurs n'ont que deux actions: esquiver le ballon et courir pour s'√©carter du loup de 5m max et le loup ne peut que conduire la balle pour se rapprocher et tirer sur un joueur(juste taguer vers qui on avance et tirer sur lui, la cible doit juste dire s'il court quand le loup avance o√π s'il r√©agit au tir en esquivant juste, le loup n'a donc pas besoin de faire des pivots) . Vous ne pouvez que courir une fois sur deux tirs, donc si vous courez deux fois de suite‚ùå vous √™tes le nouveau loup. Le loup a plus de chances de toucher un joueur dans √† moins de 5m, toucher un joueur ayant un Ranking trop √©lev√© que vous est difficile il est donc plus facile de toucher un joueur ayant un Ranking plus faible o√π proche de vous, le Ranking de base est d√©fini par le niveau de puissance‚è´.

‚öΩ Voulez vous lancer l'√©preuve ?‚åõ 
‚úÖ Oui
‚ùå Non

‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñ±‚ñ±‚ñ±‚ñî‚ñî
     ‚öΩBLUEüî∑LOCK`;

    await ovl.sendMessage(ms_org, {
      image: { url: 'https://files.catbox.moe/abcd456.jpg' }, // Remplacez par votre URL
      caption: initialMessage
    }, { quoted: ms });

    // Attente de la r√©ponse
    const getConfirmation = async (attempt = 1) => {
      if (attempt > 3) throw new Error('Trop de tentatives');
      const rep = await ovl.recup_msg({ auteur: auteur_Message, ms_org, temps: 60000 });
      const response = rep?.message?.extendedTextMessage?.text || rep?.message?.conversation;
      
      if (response?.toLowerCase() === 'non') {
        await ovl.sendMessage(ms_org, {
          image: { url: 'https://files.catbox.moe/abcd456.jpg' },
          caption: `üî∑‚öΩ√âPREUVE DU LOUPü•Ö
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë

‚ùåLancement de l'√©preuve annul√©
       
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñ±‚ñ±‚ñ±‚ñî‚ñî
      ‚öΩBLUEüî∑LOCK`
        }, { quoted: ms });
        return false;
      }
      
      if (response?.toLowerCase() === 'oui') {
        await ovl.sendMessage(ms_org, {
          image: { url: 'https://files.catbox.moe/abcd456.jpg' },
          caption: `üî∑ ‚öΩ√âPREUVE DU LOUPü•Ö
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë

‚úÖSUCC√àS: Veuillez taguer le loup pour lancer la partie

‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñ±‚ñ±‚ñ±‚ñî‚ñî
      ‚öΩBLUEüî∑LOCK`
        }, { quoted: ms });
        return true;
      }
      
      await repondre('‚ùì Veuillez r√©pondre par Oui ou Non.');
      return await getConfirmation(attempt + 1);
    };

    const confirmed = await getConfirmation();
    if (!confirmed) return;

    // Attente du tag du loup
    await ovl.sendMessage(ms_org, {
      video: { url: 'https://files.catbox.moe/efgh789.gif' }, // Remplacez par votre URL
      caption: 'En attente du tag du loup...',
      gifPlayback: true
    }, { quoted: ms });

    const getLoupTag = async (attempt = 1) => {
      if (attempt > 3) throw new Error('Trop de tentatives pour taguer le loup');
      const rep = await ovl.recup_msg({ auteur: auteur_Message, ms_org, temps: 120000 });
      const message = rep?.message;
      
      if (!message) {
        await repondre('‚ùå Aucun tag re√ßu. Veuillez taguer le joueur qui sera le loup.');
        return await getLoupTag(attempt + 1);
      }
      
      // Extraction du tag (mention)
      let loupTag = '';
      if (message.extendedTextMessage && message.extendedTextMessage.contextInfo && message.extendedTextMessage.contextInfo.mentionedJid) {
        loupTag = message.extendedTextMessage.contextInfo.mentionedJid[0];
      }
      
      if (!loupTag) {
        await repondre('‚ùå Format incorrect. Veuillez taguer un joueur avec @.');
        return await getLoupTag(attempt + 1);
      }
      
      return loupTag;
    };

    const loupTag = await getLoupTag();
    
    // D√©marrage de l'√©preuve
    await ovl.sendMessage(ms_org, {
      video: { url: 'https://files.catbox.moe/ijk012.gif' }, // Remplacez par votre URL
      caption: `üî∑‚öΩ√âPREUVE DU LOUPü•Ö
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë

‚öΩD√âBUT DE L'√âPREUVE
> @${loupTag.split('@')[0]} vous √™tes d√©sormais le loup, vous avez 20min avant de vous faire √©liminer. Passer le titre de loup √† un autre joueur pour r√©ussir l'√©preuve. BONNE CHANCE !

‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñ±‚ñ±‚ñ±‚ñî‚ñî
     ‚öΩBLUEüî∑LOCK`,
      gifPlayback: true
    }, { quoted: ms });

    // Initialisation de l'√©tat de l'√©preuve
    epreuveState.set(ms_org, {
      loup: loupTag,
      startTime: Date.now(),
      timer: null,
      interval: null,
      lastLoup: loupTag
    });

    // D√©compte de 20 minutes
    const startEpreuve = async () => {
      const state = epreuveState.get(ms_org);
      if (!state) return;
      
      const endTime = state.startTime + 20 * 60 * 1000; // 20 minutes
      
      // Rappel toutes les 5 minutes
      state.interval = setInterval(async () => {
        const remaining = Math.ceil((endTime - Date.now()) / (60 * 1000));
        if (remaining <= 0) {
          clearInterval(state.interval);
          return;
        }
        
        if (remaining % 5 === 0) {
          await ovl.sendMessage(ms_org, {
            caption: `üî∑‚öΩ√âPREUVE DU LOUPü•Ö
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë

‚è∞ RAPPEL: Il reste ${remaining} minutes avant la fin de l'√©preuve. Le loup actuel est @${state.loup.split('@')[0]}

‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñ±‚ñ±‚ñ±‚ñî‚ñî
     ‚öΩBLUEüî∑LOCK`
          }, { quoted: ms });
        }
      }, 60 * 1000); // V√©rifier toutes les minutes
      
      // Timer de fin
      state.timer = setTimeout(async () => {
        const finalState = epreuveState.get(ms_org);
        if (!finalState) return;
        
        await ovl.sendMessage(ms_org, {
          video: { url: 'https://files.catbox.moe/lmn345.gif' }, // Remplacez par votre URL
          caption: `üî∑‚öΩ√âPREUVE DU LOUPü•Ö
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë

‚öΩFIN DE L'√âPREUVE
> Joueur @${finalState.lastLoup.split('@')[0]} tu es √©limin√©‚ùå
     ¬†¬†
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñ±‚ñ±‚ñ±‚ñî‚ñî
     ‚öΩBLUEüî∑LOCK`,
          gifPlayback: true
        }, { quoted: ms });
        
        // Nettoyage
        clearInterval(finalState.interval);
        epreuveState.delete(ms_org);
      }, 20 * 60 * 1000); // 20 minutes
    };

    startEpreuve();

    // √âcoute des messages pendant l'√©preuve
    const listenForEvents = async () => {
      const state = epreuveState.get(ms_org);
      if (!state) return;
      
      try {
        const rep = await ovl.recup_msg({ 
          auteur: auteur_Message, 
          ms_org, 
          temps: 20 * 60 * 1000 // 20 minutes
        });
        
        const message = rep?.message;
        if (!message) return;
        
        const text = message.extendedTextMessage?.text || message.conversation || '';
        
        // V√©rifier l'arr√™t de l'√©preuve
        if (text.toLowerCase().includes('arr√™t √©preuve')) {
          const currentState = epreuveState.get(ms_org);
          if (currentState) {
            clearTimeout(currentState.timer);
            clearInterval(currentState.interval);
            epreuveState.delete(ms_org);
            
            await ovl.sendMessage(ms_org, {
              caption: `üî∑‚öΩ√âPREUVE DU LOUPü•Ö
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë

‚èπÔ∏è √âPREUVE ARR√äT√âE MANUELLEMENT
     ¬†¬†
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñ±‚ñ±‚ñ±‚ñî‚ñî
     ‚öΩBLUEüî∑LOCK`
            }, { quoted: ms });
          }
          return;
        }
        
        // V√©rifier si c'est une fiche de transfert
        if (text.includes('*‚öΩLoup*=') && text.includes('*‚öΩCible*=')) {
          await processTransfert(ms_org, ovl, ms, text, state);
        }
        
        // Continuer √† √©couter
        listenForEvents();
      } catch (error) {
        console.error('Erreur √©coute √©v√©nements:', error);
      }
    };
    
    listenForEvents();

  } catch (e) {
    console.error('Erreur √©preuve du loup:', e.message);
    repondre("‚ùå Une erreur est survenue lors de l'√©preuve.");
  }
});

// Fonction pour traiter un transfert de loup
async function processTransfert(ms_org, ovl, ms, text, state) {
  try {
    // Extraction des donn√©es de la fiche
    const loupMatch = text.match(/\*‚öΩLoup\*=\s*(\d+)/);
    const cibleMatch = text.match(/\*‚öΩCible\*=\s*(\d+)/);
    const viseMatch = text.match(/\*‚öΩVis√©\*=\s*@([\w\d]+)/);
    const distanceMatch = text.match(/\*‚öΩDistance\*=\s*(\d+)m/);
    
    if (!loupMatch || !cibleMatch || !viseMatch || !distanceMatch) {
      await ovl.sendMessage(ms_org, {
        caption: "‚ùå Format de fiche incorrect. Utilisez le format sp√©cifi√©."
      }, { quoted: ms });
      return;
    }
    
    const loupValue = parseInt(loupMatch[1]);
    const cibleValue = parseInt(cibleMatch[1]);
    const viseTag = viseMatch[1];
    const distance = parseInt(distanceMatch[1]);
    
    // Calcul de la probabilit√©
    const probabilite = calculerProbabilite(loupValue, cibleValue, distance);
    const reussi = Math.random() < probabilite;
    
    // Mise √† jour de l'√©tat si r√©ussi
    if (reussi) {
      state.loup = viseTag + '@s.whatsapp.net'; // Format standard JID
      state.lastLoup = state.loup;
      
      await ovl.sendMessage(ms_org, {
        video: { url: 'https://files.catbox.moe/opq678.gif' }, // Remplacez par votre URL
        caption: `üî∑‚öΩ√âPREUVE DU LOUPü•Ö
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë

*‚úÖTOUCH√â !*
> Joueur @${viseTag} tu es le nouveau loup! Veuillez toucher un joueur avant la fin de l'√©preuve‚åõ

‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñ±‚ñ±‚ñ±‚ñî‚ñî
     ‚öΩBLUEüî∑LOCK`,
        gifPlayback: true
      }, { quoted: ms });
    } else {
      await ovl.sendMessage(ms_org, {
        video: { url: 'https://files.catbox.moe/rst901.gif' }, // Remplacez par votre URL
        caption: `üî∑‚öΩ√âPREUVE DU LOUPü•Ö
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë

*‚ùåRAT√â !*
> Joueur @${state.loup.split('@')[0]} toujours le loup! Veuillez toucher un joueur avant la fin de l'√©preuve‚åõ

‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñ±‚ñ±‚ñ±‚ñî‚ñî
     ‚öΩBLUEüî∑LOCK`,
        gifPlayback: true
      }, { quoted: ms });
    }
  } catch (error) {
    console.error('Erreur traitement transfert:', error);
    await ovl.sendMessage(ms_org, {
      caption: "‚ùå Erreur lors du traitement du transfert."
    }, { quoted: ms });
  }
}

// Fonction pour calculer la probabilit√© de r√©ussite
function calculerProbabilite(loup, cible, distance) {
  const difference = loup - cible;
  const isProche = distance <= 5;
  
  if (difference > 5) {
    return isProche ? 0.9 : 1.0;
  } else if (difference > 0) {
    return isProche ? 0.7 : 0.8;
  } else if (difference === 0) {
    return isProche ? 0.5 : 0.6;
  } else if (difference > -5) {
    return isProche ? 0.3 : 0.35;
  } else {
    return isProche ? 0.05 : 0.1;
  }
}
