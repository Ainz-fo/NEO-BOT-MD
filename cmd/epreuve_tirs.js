const { ovlcmd } = require('../lib/ovlcmd');
const axios = require('axios');
const joueurs = new Map();

const promptSystem = `
Tu es un assistant d'analyse des tirs au football.  
Ton r√¥le est d'extraire deux valeurs pr√©cises depuis une description de tir :  

1Ô∏è‚É£ "tir_type"  
2Ô∏è‚É£ "tir_zone"  

---

### üîπ TYPES DE TIR AUTORIS√âS

#### ‚öΩ Tir direct :
- "tir direct de la pointe du pied droit"
- "tir direct de la pointe du pied gauche"
- "tir direct du cou du pied droit"
- "tir direct du cou du pied gauche"
- "tir direct de l'int√©rieur du pied droit"
- "tir direct de l'int√©rieur du pied gauche"

#### üîπ Tir enroul√© :
- "tir enroul√© de l'int√©rieur du pied droit, corps d√©cal√© √† 60¬∞ sur le c√¥t√© droit, courbe de tir de 1m ou < 1m"
- "tir enroul√© de l'int√©rieur du pied gauche, corps d√©cal√© √† 60¬∞ sur le c√¥t√© gauche, courbe de tir de 1m ou < 1m"

#### üîπ Tir trivela :
- "tir trivela de l'ext√©rieur du pied droit, corps d√©cal√© √† 60¬∞ sur le c√¥t√© gauche, courbe de tir de 1m ou < 1m"
- "tir trivela de l'ext√©rieur du pied gauche, corps d√©cal√© √† 60¬∞ sur le c√¥t√© droit, courbe de tir de 1m ou < 1m"

‚ö†Ô∏è Si la courbe d√©passe 1m ou si le mod√®le ne correspond pas exactement ‚Üí tir invalide.

---

### üîπ ZONES DE TIR AUTORIS√âES
[lucarne droite, lucarne gauche, lucarne centre, mi-hauteur droite, mi-hauteur gauche, milieu, ras du sol droite, ras du sol gauche, ras du sol milieu]

---

### üì§ Format de r√©ponse (JSON strict uniquement)
{
  "tir_type": "<valeur ou 'invalide'>",
  "tir_zone": "<valeur ou 'invalide'>"
}

Ne donne aucune explication.  
Ne renvoie rien d‚Äôautre que le JSON.
`;

// ‚úÖ Fonction d'analyse avec Gemini
async function analyserTir(texte, repondre) {
  try {
    const fullText = `${promptSystem}\n"${texte}"`;
    const response = await axios.post(
      'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyCtDv8matHBhGOQF_bN4zPO-J9-60vnwFE',
      {
        contents: [
          { parts: [{ text: fullText }] }
        ]
      },
      { headers: { 'Content-Type': 'application/json' } }
    );

    const data = response.data;
    if (data.candidates && data.candidates.length > 0) {
      const reponseTexte = data.candidates[0]?.content?.parts?.[0]?.text || "";
      console.log(JSON.parse(reponseTexte.replace(/```json|```/g, '').trim()));
      return JSON.parse(reponseTexte.replace(/```json|```/g, '').trim());
    }
  } catch (err) {
    console.error("Erreur Gemini :", err);
  }
  return null;
}

// ‚úÖ Validation stricte du tir
function validerTir(analyse, texteOriginal) {
  const tir_types_valides = [
    "tir direct de la pointe du pied droit",
    "tir direct de la pointe du pied gauche",
    "tir direct du cou du pied droit",
    "tir direct du cou du pied gauche",
    "tir direct de l'int√©rieur du pied droit",
    "tir direct de l'int√©rieur du pied gauche",
    "tir enroul√© de l'int√©rieur du pied droit, corps d√©cal√© √† 60¬∞ sur le c√¥t√© droit, courbe de tir de 1m ou < 1m",
    "tir enroul√© de l'int√©rieur du pied gauche, corps d√©cal√© √† 60¬∞ sur le c√¥t√© gauche, courbe de tir de 1m ou < 1m",
    "tir trivela de l'ext√©rieur du pied droit, corps d√©cal√© √† 60¬∞ sur le c√¥t√© gauche, courbe de tir de 1m ou < 1m",
    "tir trivela de l'ext√©rieur du pied gauche, corps d√©cal√© √† 60¬∞ sur le c√¥t√© droit, courbe de tir de 1m ou < 1m"
  ];

  const tir_zones_valides = [
    "lucarne droite", "lucarne gauche", "lucarne centre",
    "mi-hauteur droite", "mi-hauteur gauche", "milieu",
    "ras du sol droite", "ras du sol gauche", "ras du sol milieu"
  ];

  if (!analyse) return false;

  const type_ok = tir_types_valides.includes(analyse.tir_type);
  const zone_ok = tir_zones_valides.includes(analyse.tir_zone);

  // V√©rifie que la courbe ‚â§ 1m dans le texte original
  const matchCourbe = texteOriginal.match(/(\d+(\.\d+)?)\s*m/i);
  const courbeValide = !matchCourbe || parseFloat(matchCourbe[1]) <= 1.0;

  return type_ok && zone_ok && courbeValide;
}

// ‚úÖ Probabilit√© de goal √† 90 %
function estGoalProbable() {
  return Math.random() < 0.9; // 90% de chance de r√©ussite
}

ovlcmd({
¬† nom_cmd: 'exercice1',
¬† classe: 'BLUELOCK‚öΩ',
¬† react: '‚öΩ',
¬† desc: "Lance l'√©preuve du loup"
},async (ms_org, ovl, { repondre, auteur_Message }) => {
¬† try {
¬† ¬† await ovl.sendMessage(ms_org, {
¬† ¬† ¬† video: { url: 'https://files.catbox.moe/z64kuq.mp4' },
¬† ¬† ¬† gifPlayback: true,
¬† ¬† ¬† caption: ''
¬† ¬† });

¬† ¬† const texteDebut = `*üî∑√âPREUVE DE TIRS‚öΩü•Ö*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë

                   üî∑‚öΩR√àGLES:
Dans cet exercice l'objectif est de marquer 18 buts en 18 tirs max dans le temps imparti ‚ùó20 mins‚åõ face √† un gardien Robot qui  m√©morise vos tirs pour bloquer le m√™me tir de suite. ‚ö†Vous devez marquer au moins 6 buts sinon vous √™tes √©limin√© ‚ùå. 

‚ö†SI VOUS RATEZ UN TIR, FIN DE L'EXERCICE ‚ùå.

‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî üî∑RANKINGüèÜ ‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî  
                       
ü•âNovice: 5 buts‚öΩ (25 pts) 
ü•àPro: 10 buts‚öΩ (50 pts) 
ü•áClasse mondiale: 15 buts‚öΩüèÜ(100 pts) 

‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë ‚ñë                         

Souhaitez-vous lancer l'exercice ? :
‚úÖ Oui
‚ùå Non

                         ‚öΩBLUEüî∑LOCK`;

¬† ¬† await ovl.sendMessage(ms_org, {
¬† ¬† ¬† image: { url: 'https://files.catbox.moe/09rll9.jpg' },
¬† ¬† ¬† caption: texteDebut
¬† ¬† });

¬† ¬† const rep = await ovl.recup_msg({ auteur: auteur_Message, ms_org, temps: 60000 });
¬† ¬† const response = rep?.message?.extendedTextMessage?.text || rep?.message?.conversation;
¬† ¬† if (!response) return repondre("‚è≥Pas de r√©ponse, √©preuve annul√©e.");
¬† ¬† if (response.toLowerCase() === "non") return repondre("‚ùå Lancement de l'exercice annul√©...");

¬† ¬† if (response.toLowerCase() === "oui") {
¬† ¬† ¬† const id = auteur_Message;
¬† ¬† ¬† const timer = setTimeout(() => {
¬† ¬† ¬† ¬† if (joueurs.has(id)) {
¬† ¬† ¬† ¬† ¬† joueurs.get(id).en_cours = false;
¬† ¬† ¬† ¬† ¬† envoyerResultats(ms_org, ovl, joueurs.get(id));
¬† ¬† ¬† ¬† }
¬† ¬† ¬† }, 20 * 60 * 1000);

¬† ¬† ¬† joueurs.set(id, {
¬† ¬† ¬† ¬† id,
¬† ¬† ¬† ¬† tir_type: null,
¬† ¬† ¬† ¬† tir_zone: null,
¬† ¬† ¬† ¬† tir_info: [],
¬† ¬† ¬† ¬† but: 0,
¬† ¬† ¬† ¬† tirs_total: 0,
¬† ¬† ¬† ¬† en_cours: true,
¬† ¬† ¬† ¬† timer,
¬† ¬† ¬† ¬† paused: false,
¬† ¬† ¬† ¬† remainingTime: 20 * 60 * 1000,
¬† ¬† ¬† ¬† pauseTimestamp: null
¬† ¬† ¬† });

¬† ¬† ¬† await ovl.sendMessage(ms_org, {
¬† ¬† ¬† ¬† video: { url: "https://files.catbox.moe/zqm7et.mp4" },
¬† ¬† ¬† ¬† gifPlayback: true,
¬† ¬† ¬† ¬† caption: `*‚öΩBLUE LOCKüî∑:* D√©but de l'exercice ‚åõ Dur√©e : 20:00 mins`
¬† ¬† ¬† });
¬† ¬† }
¬† } catch (error) {
¬† ¬† repondre("‚ùå Une erreur est survenue.");
¬† ¬† console.error(error);
¬† }
});

ovlcmd({
¬† nom_cmd: 'epreuve du tir',
¬† isfunc: true
}, async (ms_org, ovl, { repondre, auteur_Message, texte }) => {
  if (!texte.toLowerCase().endsWith("*‚öΩblueüî∑lockü•Ö*")) return;
¬† const id = auteur_Message;
¬† const joueur = joueurs.get(id);
¬† if (!joueur || !joueur.en_cours) return;

        
¬† ); ovlcmd({
  nom_cmd: 'epreuve du tir',
  isfunc: true
}, async (ms_org, ovl, { repondre, auteur_Message, texte }) => {
  if (!texte.toLowerCase().endsWith("*‚öΩblueüî∑lockü•Ö*")) return;
  const id = auteur_Message;
  const joueur = joueurs.get(id);
  if (!joueur || !joueur.en_cours) return;

  const analyse = await analyserTir(texte, repondre);
  if (!analyse || !analyse.tir_type || !analyse.tir_zone) return;

  // ‚úÖ Validation stricte
  if (!validerTir(analyse, texte)) {
    clearTimeout(joueur.timer);
    joueur.en_cours = false;
    await ovl.sendMessage(ms_org, {
      video: { url: "https://files.catbox.moe/x5skj8.mp4" },
      gifPlayback: true,
      caption: "‚ùåMISSED! : Tir non conforme (conditions non respect√©es)."
    });
    return envoyerResultats(ms_org, ovl, joueur);
  }

  joueur.tirs_total++;
  const tir_courant = { tir_type: analyse.tir_type, tir_zone: analyse.tir_zone };

  // ‚ö†Ô∏è V√©rif tir r√©p√©t√©
  const dernier_tir = joueur.tir_info[joueur.tir_info.length - 1];
  const tir_repet√©_consecutif = dernier_tir &&
    dernier_tir.tir_type === tir_courant.tir_type &&
    dernier_tir.tir_zone === tir_courant.tir_zone;

  // Si tir r√©p√©t√© sans 3 tirs diff√©rents entre temps
  const tir_repet√©_interdit = tir_repet√©_consecutif && joueur.tir_info.length < 3;

  if (tir_repet√©_interdit) {
    clearTimeout(joueur.timer);
    joueur.en_cours = false;
    await ovl.sendMessage(ms_org, {
      video: { url: "https://files.catbox.moe/9k5b3v.mp4" },
      gifPlayback: true,
      caption: "‚ùåMISSED! : Tir r√©p√©t√© trop t√¥t, √©chec de l'exercice."
    });
    return envoyerResultats(ms_org, ovl, joueur);
  }

  // ‚úÖ Calcul du but selon probabilit√©
  const goal = estGoalProbable();

  if (goal) {
    joueur.but++;
    joueur.tir_info.push(tir_courant);
    if (joueur.tir_info.length > 3) joueur.tir_info.shift();

    const restants = 15 - joueur.but;

    await ovl.sendMessage(ms_org, {
      video: { url: "https://files.catbox.moe/pad98d.mp4" },
      gifPlayback: true,
      caption: `‚úÖ‚öΩGOAL : ${joueur.but} but${joueur.but > 1 ? 's' : ''} marqu√© üéØ\n‚ö†Ô∏è Il vous reste ${restants} tirs ‚åõ`
    });

    if (joueur.but >= 15) {
      clearTimeout(joueur.timer);
      joueur.en_cours = false;
      return envoyerResultats(ms_org, ovl, joueur);
    }
  } else {
    clearTimeout(joueur.timer);
    joueur.en_cours = false;
    await ovl.sendMessage(ms_org, {
      video: { url: "https://files.catbox.moe/x5skj8.mp4" },
      gifPlayback: true,
      caption: "‚ùåMISSED! : Le gardien arr√™te le tir !"
    });
    return envoyerResultats(ms_org, ovl, joueur);
  }
});

ovlcmd({
¬† nom_cmd: 'stop_exercice',
  react: '‚öΩ'  
}, async (ms_org, ovl, { repondre, arg, auteur_Message, texte }) => {
¬† const action = arg[0]?.toLowerCase();
¬† const targetId = arg[1] + "@s.whatsapp.net";
¬† const joueur = joueurs.get(targetId);

¬† if (!joueur) return repondre("‚ùå Joueur non trouv√©.");

¬† if (action === "pause" && !joueur.paused) {
¬† ¬† clearTimeout(joueur.timer);
¬† ¬† joueur.paused = true;
¬† ¬† joueur.pauseTimestamp = Date.now();
¬† ¬† joueur.remainingTime -= (Date.now() - (joueur.pauseTimestamp || Date.now()));
¬† ¬† return repondre(`‚è∏Ô∏è √âpreuve mise en pause.`);
¬† }

¬† if (action === "resume" && joueur.paused) {
¬† ¬† joueur.paused = false;
¬† ¬† joueur.timer = setTimeout(() => {
¬† ¬† ¬† joueur.en_cours = false;
¬† ¬† ¬† //envoyerResultats(ms_org, ovl, joueur);
¬† ¬† }, joueur.remainingTime);
¬† ¬† return repondre(`‚ñ∂Ô∏è √âpreuve reprise.`);
¬† }

¬† if (action === "stop") {
¬† ¬† clearTimeout(joueur.timer);
¬† ¬† joueur.en_cours = false;
¬† ¬† joueurs.delete(targetId);
¬† ¬† return repondre(`‚èπÔ∏è √âpreuve stopp√©e.`);
¬† }

¬† return repondre("‚ùå Commande invalide. Utilisez : pause / resume / stop @pseudo");
});

async function envoyerResultats(ms_org, ovl, joueur) {
¬† const tag = `@${joueur.id.split('@')[0]}`;
¬† let rank = "‚ùå";
¬† if (joueur.but >= 15) rank = "SSü•á";
¬† else if (joueur.but >= 10) rank = "Sü•à";
¬† else if (joueur.but >= 5) rank = "Aü•â";

¬† const result = `‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî     ‚ñî‚ñî‚ñî‚ñî‚ñî
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† *üî∑BLUE LOCK‚öΩ*
¬† ‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî   ‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
¬† ¬† üî∑RESULTATS DE L'√âVALUATIONüìä

*ü•ÖExercice:* √âpreuve de tirs
*üë§Joueur:* ${tag}
*‚öΩButs:* ${joueur.but}
*üìäRank:* ${rank}
`;

¬† await ovl.sendMessage(ms_org, {
¬† ¬† image: { url: "https://files.catbox.moe/1xnoc6.jpg" },
¬† ¬† caption: result,
¬† ¬† mentions: [joueur.id]
¬† });

¬† joueurs.delete(joueur.id);
}
